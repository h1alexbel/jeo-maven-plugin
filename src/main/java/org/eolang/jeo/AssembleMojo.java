/*
 * The MIT License (MIT)
 *
 * SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
 * SPDX-License-Identifier: MIT
 */
package org.eolang.jeo;

import com.jcabi.log.Logger;
import java.io.File;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

/**
 * Converts EO to bytecode.
 * In other words, it assembles low-lever representation EO to bytecode that JVM can execute.
 * The mojo that converts EO to bytecode only.
 * It does not apply any improvements.
 *
 * @since 0.1.0
 */
@Mojo(name = "assemble", defaultPhase = LifecyclePhase.PROCESS_CLASSES)
public final class AssembleMojo extends AbstractMojo {

    /**
     * Maven project.
     *
     * @since 0.2
     */
    @Parameter(defaultValue = "${project}", required = true, readonly = true)
    private MavenProject project;

    /**
     * Source directory.
     *
     * @since 0.2.0
     * @checkstyle MemberNameCheck (6 lines)
     */
    @Parameter(
        property = "jeo.assemble.sourcesDir",
        defaultValue = "${project.build.directory}/generated-sources/jeo-xmir"
    )
    private File sourcesDir;

    /**
     * Target directory.
     *
     * @since 0.2.0
     * @checkstyle MemberNameCheck (6 lines)
     */
    @Parameter(
        property = "jeo.assemble.outputDir",
        defaultValue = "${project.build.outputDirectory}"
    )
    private File outputDir;

    /**
     * Skip bytecode verification.
     * We check all generated bytecode by default.
     * If you want to skip this verification, set this parameter to true.
     *
     * @since 0.2.0
     * @checkstyle MemberNameCheck (6 lines)
     */
    @Parameter(
        property = "jeo.assemble.skip.verification",
        defaultValue = "false"
    )
    private boolean skipVerification;

    /**
     * Xmir verification before assembling.
     * Before assembling, we verify all the xmir files.
     * If any of them are invalid or corrupted, we stop the process.
     * If you want to run this verification, set this parameter to true.
     *
     * @since 0.8
     * @checkstyle MemberNameCheck (6 lines)
     */
    @Parameter(
        property = "jeo.assemble.xmir.verification",
        defaultValue = "false"
    )
    private boolean xmirVerification;

    /**
     * Whether the plugin is disabled.
     * If it's disabled, then it won't do anything.
     *
     * @since 0.2.0
     * @checkstyle MemberNameCheck (6 lines)
     */
    @Parameter(
        property = "jeo.disassemble.disabled",
        defaultValue = "false"
    )
    private boolean disabled;

    @Override
    public void execute() throws MojoExecutionException {
        try {
            if (this.disabled) {
                Logger.info(this, "Assemble mojo is disabled. Skipping.");
            } else {
                if (this.xmirVerification) {
                    Logger.info(this, "Verifying all the xmir files before assembling.");
                    new XmirFiles(this.sourcesDir.toPath()).verify();
                } else {
                    Logger.info(this, "Xmir verification before assembling is disabled. Skipping.");
                }
                new Assembler(
                    this.sourcesDir.toPath(),
                    this.outputDir.toPath()
                ).assemble();
                if (this.skipVerification) {
                    Logger.info(this, "Bytecode verification is disabled. Skipping.");
                } else {
                    Logger.info(this, "Bytecode verification of all the generated classes.");
                    new PluginStartup(this.project, this.outputDir.toPath()).init();
                    new BytecodeClasses(this.outputDir.toPath()).verify();
                }
            }
        } catch (final DependencyResolutionRequiredException exception) {
            throw new MojoExecutionException(exception);
        }
    }
}
